{"version":3,"sources":["components/Graph/Graph.js","components/SixDegreesForm/SixDegreesForm.js","components/SixDegreesForm/index.js","App.js","serviceWorker.js","index.js"],"names":["vertices","require","i2n","n2i","g","name","this","id_to_name","name_to_id","names","push","sourceId","targetId","visited","queue","length","path","shift","node","includes","neighbors","neighbor","newPath","slice","SixDegreesForm","useState","pathRes","setPathRes","playerOne","setPlayerOne","playerTwo","setPlayerTwo","get_random_player","setFunc","fetch","method","headers","then","res","json","data","player","onSubmit","e","preventDefault","id1","target","player1","value","id2","player2","console","time","timeEnd","forEach","idx","map","item","key","htmlFor","type","id","onChange","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1257391c.chunk.js","sourcesContent":["const vertices = require(\"./graph.json\");\nconst i2n = require(\"./id_to_name.json\");\nconst n2i = require(\"./name_to_id.json\");\nconst fuzzysort = require(\"fuzzysort\");\n\nclass Graph {\n  constructor(vertices, i2n, n2i) {\n    this.vertices = vertices;\n    this.id_to_name = i2n;\n    this.name_to_id = n2i;\n\n    this.names = [];\n    for (const name in n2i) {\n      this.names.push(name);\n    }\n  }\n\n  path(sourceId, targetId) {\n    // Handle case where either of them doesn't exist in the graph\n    if (!sourceId || !targetId) {\n      return [];\n    }\n\n    // Edge case where they're the same\n    if (sourceId === targetId) {\n      return [sourceId];\n    }\n\n    const visited = []; // Tracks visited vertices\n    const queue = [[sourceId]]; // Vertices to visit\n\n    while (queue.length > 0) {\n      let path = queue.shift();\n      let node = path[path.length - 1];\n\n      // If the node was visited already, can skip\n      if (!visited.includes(node)) {\n        let neighbors = this.vertices[node];\n\n        // Loop to iterate over the neighbors of the node\n        for (const neighbor of neighbors) {\n          let newPath = path.slice();\n          newPath.push(neighbor);\n          queue.push(newPath);\n\n          // Check if the neighbor node is the goal\n          if (neighbor === targetId) {\n            return newPath;\n          }\n        }\n        visited.push(node);\n      }\n    }\n    // Condition when the nodes are not connected\n    return [];\n  }\n}\n\nconst g = new Graph(vertices, i2n, n2i);\n\nexport default g;\n","import React, { useState } from \"react\";\nimport g from \"../Graph/Graph\";\n\nfunction SixDegreesForm() {\n  // console.log(players.length);\n  // console.log(players.map((name) => ({ value: name, label: name }))); // Change this later so that it's stored as data\n\n  const [pathRes, setPathRes] = useState(null);\n\n  const [playerOne, setPlayerOne] = useState(\"\");\n  const [playerTwo, setPlayerTwo] = useState(\"\");\n\n  function handleSubmit2(e) {\n    e.preventDefault(); // Default behavior is to refresh page, we don't want that\n    const id1 = g.name_to_id[e.target.player1.value];\n    const id2 = g.name_to_id[e.target.player2.value];\n\n    // If either is undefined, this won't happen\n    console.time(\"path\");\n    let path = g.path(id1, id2);\n    console.timeEnd(\"path\");\n\n    path.forEach((node, idx) => {\n      path[idx] = g.id_to_name[node];\n    });\n\n    // Covers potential cases if no path has been found\n    if (path.length === 0) {\n      setPathRes(\n        <p>\n          No path found. Double check that the inputs are exactly as they are on\n          PFR's website. If so, then it's possible there simply is no path\n          between the players.\n        </p>\n      );\n      // Otherwise returns the paths in a list format (could update later to make it look better)\n    } else {\n      setPathRes(path.map((item) => <li key={`path-item-${item}`}>{item}</li>));\n    }\n  }\n\n  function get_random_player(setFunc) {\n    fetch(\"/api/get_random_player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setFunc(data.player);\n      });\n  }\n\n  return (\n    <div>\n      <h1>Six Degrees of Separation</h1>\n      <p>\n        Look up two players on Pro Football Reference. Paste in their URL IDs\n        and hit submit. As an example, Aaron Rodgers's PFR URL is\n        https://www.pro-football-reference.com/players/R/RodgAa00.htm, so his ID\n        would be RodgAa00.\n      </p>\n      <form onSubmit={handleSubmit2}>\n        <label htmlFor=\"player1\">Player 1:</label>\n        <input\n          type=\"text\"\n          id=\"player1\"\n          name=\"player1\"\n          value={playerOne}\n          onChange={(e) => setPlayerOne(e.target.value)}\n        />\n        <button type=\"button\" onClick={() => get_random_player(setPlayerOne)}>\n          Random\n        </button>\n        <br /> {/* Rename these ids later */}\n        <label htmlFor=\"player2\">Player 2:</label>\n        <input\n          type=\"text\"\n          id=\"player2\"\n          name=\"player2\"\n          value={playerTwo}\n          onChange={(e) => setPlayerTwo(e.target.value)}\n        />\n        <button type=\"button\" onClick={() => get_random_player(setPlayerTwo)}>\n          Random\n        </button>\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n        <br />\n      </form>\n      <ul>{pathRes}</ul>\n    </div>\n  );\n}\n\nexport default SixDegreesForm;\n","import SixDegreesForm from './SixDegreesForm.js';\nexport default SixDegreesForm;","import React from \"react\";\nimport \"./App.css\";\nimport SixDegreesForm from \"./components/SixDegreesForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SixDegreesForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}