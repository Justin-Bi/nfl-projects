{"version":3,"sources":["components/SixDegreesForm/SixDegreesForm.js","components/SixDegreesForm/index.js","App.js","serviceWorker.js","index.js"],"names":["SixDegreesForm","useState","players","setPlayers","useEffect","fetch","method","headers","then","res","json","data","console","log","length","map","name","value","label","pathRes","setPathRes","playerOne","setPlayerOne","playerTwo","setPlayerTwo","get_random_player","setFunc","player","onSubmit","e","preventDefault","body","JSON","stringify","player1","target","player2","path","item","key","htmlFor","type","id","onChange","onClick","options","placeholder","styles","menuList","maxHeight","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"yTAyIeA,ICxIAA,EDGf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEAC,qBAAU,WACRC,MAAM,uBAAwB,CAC5BC,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLR,EAAU,WAAV,cAAcD,GAAd,QAAuBS,EAAKT,gBAE/B,IAEHU,QAAQC,IAAIX,EAAQY,QACpBF,QAAQC,IAAIX,EAAQa,KAAI,SAACC,GAAD,MAAW,CAAEC,MAAOD,EAAME,MAAOF,OAEzD,MAA8Bf,mBAAS,MAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KAEA,EAAkCnB,mBAAS,IAA3C,mBAAOoB,EAAP,KAAkBC,EAAlB,KACA,EAAkCrB,mBAAS,IAA3C,mBAAOsB,EAAP,KAAkBC,EAAlB,KA2CA,SAASC,EAAkBC,GACzBrB,MAAM,yBAA0B,CAC9BC,OAAQ,MACRC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLe,EAAQf,EAAKgB,WAInB,OACE,6BACE,yDACA,0PAMA,0BAAMC,SAzDV,SAAuBC,GACrBA,EAAEC,iBAGFzB,MAAM,YAAa,CACjBC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBwB,KAAMC,KAAKC,UAAU,CAEnBC,QAASL,EAAEM,OAAOD,QAAQjB,MAC1BmB,QAASP,EAAEM,OAAOC,QAAQnB,UAG3BT,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEoB,IAArBA,EAAK0B,KAAKvB,OACZM,EACE,4LAQFA,EACET,EAAK0B,KAAKtB,KAAI,SAACuB,GAAD,OAAU,wBAAIC,IAAG,oBAAeD,IAASA,YA6B3D,2BAAOE,QAAQ,WAAf,aACA,2BACEC,KAAK,OACLC,GAAG,UACH1B,KAAK,UACLC,MAAOI,EACPsB,SAAU,SAACd,GAAD,OAAOP,EAAaO,EAAEM,OAAOlB,UAEzC,4BAAQwB,KAAK,SAASG,QAAS,kBAAMnB,EAAkBH,KAAvD,UAGA,6BAZF,IAaE,2BAAOkB,QAAQ,WAAf,aACA,2BACEC,KAAK,OACLC,GAAG,UACH1B,KAAK,UACLC,MAAOM,EACPoB,SAAU,SAACd,GAAD,OAAOL,EAAaK,EAAEM,OAAOlB,UAEzC,4BAAQwB,KAAK,SAASG,QAAS,kBAAMnB,EAAkBD,KAAvD,UAGA,6BACA,2BAAOiB,KAAK,SAASxB,MAAM,WAC3B,kBAAC,IAAD,CACE4B,QAAS3C,EACT4C,YAAY,GACZC,OAAQ,CACNC,SAAU,SAACD,GAET,OADAnC,QAAQC,IAAI,YAAakC,GAClB,2BACFA,GADL,IAEEE,UAAW,UAKnB,8BAEF,4BAAK9B,KExHI+B,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxD,MAAK,SAAAyD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxD,QAAQwD,MAAMA,EAAMC,c","file":"static/js/main.f2c661d8.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport \"./SixDegreesForm.css\";\n\nfunction SixDegreesForm() {\n  const [players, setPlayers] = useState([]);\n\n  useEffect(() => {\n    fetch(\"/api/get_all_players\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setPlayers(...players, data.players);\n      });\n  }, []);\n\n  console.log(players.length);\n  console.log(players.map((name) => ({ value: name, label: name }))); // Change this later so that it's stored as data\n\n  const [pathRes, setPathRes] = useState(null);\n\n  const [playerOne, setPlayerOne] = useState(\"\");\n  const [playerTwo, setPlayerTwo] = useState(\"\");\n\n  const options = [\n    { value: \"chocolate\", label: \"Chocolate\" },\n    { value: \"strawberry\", label: \"Strawberry\" },\n    { value: \"vanilla\", label: \"Vanilla\" },\n  ];\n\n  function handleSubmit2(e) {\n    e.preventDefault(); // Default behavior is to refresh page, we don't want that\n\n    // Send the two player IDs over to the API to perform the shortest path alg\n    fetch(\"/api/path\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        // Both player IDs\n        player1: e.target.player1.value,\n        player2: e.target.player2.value,\n      }),\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        // Covers potential cases if no path has been found\n        if (data.path.length === 0) {\n          setPathRes(\n            <p>\n              No path found. Double check that the inputs are exactly as they\n              are on PFR's website. If so, then it's possible there simply is no\n              path between the players.\n            </p>\n          );\n          // Otherwise returns the paths in a list format (could update later to make it look better)\n        } else {\n          setPathRes(\n            data.path.map((item) => <li key={`path-item-${item}`}>{item}</li>)\n          );\n        }\n      });\n  }\n\n  function get_random_player(setFunc) {\n    fetch(\"/api/get_random_player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setFunc(data.player);\n      });\n  }\n\n  return (\n    <div>\n      <h1>Six Degrees of Separation</h1>\n      <p>\n        Look up two players on Pro Football Reference. Paste in their URL IDs\n        and hit submit. As an example, Aaron Rodgers's PFR URL is\n        https://www.pro-football-reference.com/players/R/RodgAa00.htm, so his ID\n        would be RodgAa00.\n      </p>\n      <form onSubmit={handleSubmit2}>\n        <label htmlFor=\"player1\">Player 1:</label>\n        <input\n          type=\"text\"\n          id=\"player1\"\n          name=\"player1\"\n          value={playerOne}\n          onChange={(e) => setPlayerOne(e.target.value)}\n        />\n        <button type=\"button\" onClick={() => get_random_player(setPlayerOne)}>\n          Random\n        </button>\n        <br /> {/* Rename these ids later */}\n        <label htmlFor=\"player2\">Player 2:</label>\n        <input\n          type=\"text\"\n          id=\"player2\"\n          name=\"player2\"\n          value={playerTwo}\n          onChange={(e) => setPlayerTwo(e.target.value)}\n        />\n        <button type=\"button\" onClick={() => get_random_player(setPlayerTwo)}>\n          Random\n        </button>\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n        <Select\n          options={players}\n          placeholder=\"\"\n          styles={{\n            menuList: (styles) => {\n              console.log(\"menuList:\", styles);\n              return {\n                ...styles,\n                maxHeight: 136,\n              };\n            },\n          }}\n        />\n        <br />\n      </form>\n      <ul>{pathRes}</ul>\n    </div>\n  );\n}\n\nexport default SixDegreesForm;\n","import SixDegreesForm from './SixDegreesForm.js';\nexport default SixDegreesForm;","import React from \"react\";\nimport \"./App.css\";\nimport SixDegreesForm from \"./components/SixDegreesForm\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SixDegreesForm/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}