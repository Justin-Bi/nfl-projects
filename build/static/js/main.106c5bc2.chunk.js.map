{"version":3,"sources":["_colors.scss","components/InputField/InputField.scss","components/Button/Button.scss","components/SixDegreesForm/SixDegreesForm.scss","components/Footer/Footer.scss","components/NavBar/NavBar.js","components/NavBar/index.js","components/Graph/Graph.js","components/InputField/InputField.js","components/InputField/index.js","components/Button/Button.js","components/Button/index.js","components/Spinner/Spinner.js","components/Spinner/index.js","components/SixDegreesForm/SixDegreesForm.js","components/SixDegreesForm/index.js","components/Icon/Icon.js","components/Icon/index.js","components/HeroText/HeroText.js","components/HeroText/index.js","components/TeammatesForm/TeammatesForm.js","components/TeammatesForm/index.js","components/Body/Body.js","components/Body/index.js","components/Footer/Footer.js","components/Footer/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","Container","Row","Col","sm","md","lg","to","id","activeClassName","vertices","require","i2n","n2i","vert_objs","fuzzysort","g","name","this","id_to_name","name_to_id","names","players","size","push","length","isPlayer","searchName","sourceId","targetId","graphReturnFunc","graphCallback","visited","queue","verts","now","Date","getTime","doChunk","startTime","path","shift","node","includes","neighbors","neighbor","newPath","slice","setTimeout","category","Math","floor","random","input","coll","collection","amount","teams","inColl","res","go","limit","threshold","Infinity","allowTypo","arr","r","target","teammates","idx","indexOf","splice","InputField","inputId","label","setValueFunc","useState","focused","setFocused","activeIdx","setActiveIdx","suggestions","setSuggestions","textInput","setTextInput","setInput","AutocompleteList","style","borderBottom","map","item","i","key","onMouseDown","e","preventDefault","onClick","handleTeammatesInputChange","searchQuery","bestNames","htmlFor","type","value","borderRadius","onFocus","onBlur","onChange","onKeyDown","calcIdx","newIdx","calcInput","version","xmlns","x","y","viewBox","playerName","randomName","d","Button","props","disabled","Spinner","width","height","SixDegreesForm","searched","setSearched","searching","setSearching","numVisited","setNumVisited","playerOne","setPlayerOne","playerTwo","setPlayerTwo","p1Corrected","setP1Corrected","p2Corrected","setP2Corrected","p1Display","setP1Display","p2Display","setP2Display","pathIDs","setPathIDs","mounted","useRef","current","useEffect","PathResultsDiv","forEach","connectionNum","pop","substring","onSubmit","id1","id2","pathWebVersion","types","Icon","HeroText","children","TeammatesForm","setTeammates","setValue","dispValue","setDispValue","corrected","setCorrected","invSearch","setInvSearch","listToggle","setListToggle","TeammatesReturnDiv","fill","autoComplete","teammateRes","getTeammates","Body","exact","Footer","iconStyle","variables","nflBlue","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.106c5bc2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nflBlue\":\"#013369\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nflBlue\":\"#013369\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nflBlue\":\"#013369\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nflBlue\":\"#013369\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nflBlue\":\"#013369\"};","import React from \"react\";\nimport \"./NavBar.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction NavBar() {\n  return (\n    <div className=\"nav-bar\">\n      <Container>\n        <Row>\n          <Col sm={0} md={3} lg={4} className=\"home-link-group\">\n            <NavLink className=\"nav-link home-link\" to=\"/\">\n              <span className=\"home-link-text\">NFL Projects</span>\n            </NavLink>\n          </Col>\n          <Col sm={12} md={9} lg={8}>\n            <div id=\"nav-link-group\">\n              <NavLink\n                activeClassName=\"active-link\"\n                className=\"nav-link\"\n                to=\"/six-degrees\"\n              >\n                Six Degrees of Separation\n              </NavLink>\n              <NavLink\n                activeClassName=\"active-link\"\n                className=\"nav-link\"\n                to=\"/teammates\"\n              >\n                Teammates\n              </NavLink>\n              <NavLink\n                activeClassName=\"active-link\"\n                className=\"nav-link\"\n                to=\"/height-and-weight\"\n              >\n                Height and Weight\n              </NavLink>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import NavBar from \"./NavBar\";\nexport default NavBar;\n","const vertices = require(\"./graph.json\");\nconst i2n = require(\"./id_to_name.json\");\nconst n2i = require(\"./name_to_id.json\");\nconst vert_objs = require(\"./vert_objs.json\");\nconst fuzzysort = require(\"fuzzysort\");\n\nclass Graph {\n  constructor(vertices, i2n, n2i, vert_objs) {\n    this.vertices = vertices;\n    this.id_to_name = i2n;\n    this.name_to_id = n2i;\n    this.vert_objs = vert_objs;\n    this.names = [];\n    this.players = [];\n    this.size = 0;\n\n    for (const name in n2i) {\n      this.names.push(name);\n    }\n\n    this.size = this.names.length;\n\n    for (const id in vert_objs) {\n      if (vert_objs[id].isPlayer) {\n        this.players.push(vert_objs[id].searchName);\n      }\n    }\n  }\n\n  // This path function doesn't block the UI, and also allows for passed funcs in order to update website progress and\n  // prevent React from updating an unmounted prop\n  pathWebVersion(sourceId, targetId, graphReturnFunc, graphCallback) {\n    const visited = []; // Tracks visited vertices\n    const queue = [[sourceId]]; // Vertices to visit\n    const verts = this.vertices;\n    const maxTimePerChunk = 50; // Tested to be a pretty good result\n\n    function now() {\n      return new Date().getTime();\n    }\n\n    if (!verts[sourceId] || !verts[targetId]) {\n      graphReturnFunc([]);\n      return;\n    }\n\n    // Edge case where they're the same\n    if (sourceId === targetId) {\n      graphReturnFunc([sourceId]);\n      return;\n    }\n\n    // Function does things a chunk at a time, in order to not block the UI\n    function doChunk() {\n      const startTime = now();\n      while (queue.length > 0 && now() - startTime <= maxTimePerChunk) {\n        let path = queue.shift();\n        let node = path[path.length - 1];\n        if (!visited.includes(node)) {\n          let neighbors = verts[node];\n          // Loop to iterate over the neighbors of the node\n          for (const neighbor of neighbors) {\n            let newPath = path.slice();\n            newPath.push(neighbor);\n            queue.push(newPath);\n            // Check if the neighbor node is the goal\n            if (neighbor === targetId) {\n              graphReturnFunc(newPath);\n              return;\n            }\n          }\n          visited.push(node);\n        }\n      }\n      if (queue.length > 0) {\n        const mounted = graphCallback(visited.length);\n        if (!mounted) {\n          return;\n        }\n        setTimeout(doChunk, 0);\n      } else {\n        graphReturnFunc([]);\n        return;\n      }\n    }\n    doChunk();\n  }\n\n  // Return a random item (either name or player)\n  randomName(category) {\n    if (category === \"players\") {\n      return this.players[Math.floor(Math.random() * this.players.length)];\n    } else if (category === \"teams\") {\n      return \"Not yet implemented\";\n    } else if (category === \"all\") {\n      return this.names[Math.floor(Math.random() * this.names.length)];\n    } else {\n      return \"Error\";\n    }\n  }\n\n  // Returns the closest matching names of all\n  bestNames(input, coll, amount = 20) {\n    let collection;\n    switch (coll) {\n      case \"all\":\n        collection = this.names;\n        break;\n      case \"players\":\n        collection = this.players;\n        break;\n      case \"teams\":\n        collection = this.teams;\n        break;\n      default:\n        collection = [];\n    }\n\n    const inColl = collection.includes(input);\n\n    const res = fuzzysort.go(input, collection, {\n      limit: amount,\n      threshold: inColl ? -100 : -Infinity,\n      allowTypo: true,\n    });\n    const arr = [];\n    for (const r of res) {\n      arr.push(r.target);\n    }\n    return arr;\n  }\n\n  getTeammates(sourceId) {\n    // Handle case where either of them doesn't exist in the graph\n    if (!sourceId) {\n      return [];\n    }\n\n    const teammates = [];\n    const visited = []; // Tracks visited vertices\n    const queue = [[sourceId]]; // Vertices to visit\n\n    while (queue.length > 0) {\n      let path = queue.shift();\n      let node = path[path.length - 1];\n\n      // If the node was visited already, can skip\n      // Might not need this for the teammate one\n      if (!visited.includes(node)) {\n        let neighbors = this.vertices[node];\n\n        // Case where two nodes are already in the path, the original player and the team. Means the third node\n        // about to be added must be a teammate\n        if (path.length === 2) {\n          for (const neighbor of neighbors) {\n            if (!teammates.includes(neighbor)) {\n              teammates.push(neighbor);\n            }\n          }\n        } else {\n          // Loop to iterate over the neighbors of the node\n          for (const neighbor of neighbors) {\n            let newPath = path.slice();\n            newPath.push(neighbor);\n            queue.push(newPath);\n          }\n          visited.push(node);\n        }\n      }\n    }\n\n    // Remove the sourceId from the teammates\n    const idx = teammates.indexOf(sourceId);\n    if (idx > -1) {\n      teammates.splice(idx, 1);\n    }\n    return teammates;\n  }\n\n  path(sourceId, targetId) {\n    // Handle case where either of them doesn't exist in the graph\n    if (\n      !sourceId ||\n      !targetId ||\n      !vertices.includes(sourceId) ||\n      !vertices.includes(targetId)\n    ) {\n      return [];\n    }\n\n    // Edge case where they're the same\n    if (sourceId === targetId) {\n      return [sourceId];\n    }\n\n    const visited = []; // Tracks visited vertices\n    const queue = [[sourceId]]; // Vertices to visit\n\n    while (queue.length > 0) {\n      let path = queue.shift();\n      let node = path[path.length - 1];\n\n      // If the node was visited already, can skip\n      if (!visited.includes(node)) {\n        let neighbors = this.vertices[node];\n\n        // Loop to iterate over the neighbors of the node\n        for (const neighbor of neighbors) {\n          let newPath = path.slice();\n          newPath.push(neighbor);\n          queue.push(newPath);\n\n          // Check if the neighbor node is the goal\n          if (neighbor === targetId) {\n            return newPath;\n          }\n        }\n        visited.push(node);\n      }\n    }\n    // Condition when the nodes are not connected\n    return [];\n  }\n}\n\nconst g = new Graph(vertices, i2n, n2i, vert_objs);\n\nexport default g;\n","import React, { useState } from \"react\";\nimport \"./InputField.scss\";\nimport g from \"../Graph/Graph\";\n\nfunction InputField({ inputId, label, setValueFunc }) {\n  const [focused, setFocused] = useState(false);\n  const [activeIdx, setActiveIdx] = useState(0);\n  const [suggestions, setSuggestions] = useState([]);\n  const [textInput, setTextInput] = useState(\"\");\n  const [input, setInput] = useState(\"\"); // Will want to rename this to value\n\n  const AutocompleteList = () => {\n    return !focused ? null : (\n      <div\n        id=\"autocomplete-list\"\n        className=\"autocomplete-items\"\n        style={{ borderBottom: suggestions.length ? null : \"none\" }}\n      >\n        {suggestions.map(function (item, i) {\n          return (\n            <div\n              className={activeIdx === i ? \"autocomplete-active\" : null}\n              // Prevents the bottom item to have a double border conflicting with the container\n              style={{\n                borderBottom: i === suggestions.length - 1 ? \"none\" : null,\n              }}\n              key={i}\n              // onMouseDown prevents default to stop the form from blurring before onClick can activate\n              onMouseDown={(e) => {\n                e.preventDefault();\n              }}\n              onClick={() => {\n                setInput(item);\n                setValueFunc(item);\n                setFocused(false);\n                setActiveIdx(-1);\n                handleTeammatesInputChange(item);\n              }}\n            >\n              {item}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  function handleTeammatesInputChange(searchQuery) {\n    setSuggestions(g.bestNames(searchQuery, \"players\"));\n  }\n\n  return (\n    <div className=\"autoComplete\">\n      <div className=\"input-div\">\n        <label htmlFor={inputId}>{label}</label>\n        <input\n          type=\"text\"\n          id={inputId}\n          name={inputId}\n          className=\"input-class\"\n          value={input}\n          style={{\n            borderRadius:\n              focused && suggestions.length !== 0 ? \"4px 4px 0 0\" : \"4px\",\n          }}\n          onFocus={() => {\n            setFocused(true);\n          }}\n          onBlur={(e) => {\n            setFocused(false);\n            setActiveIdx(-1);\n            handleTeammatesInputChange(e.target.value);\n          }}\n          onChange={(e) => {\n            setFocused(true);\n            setActiveIdx(-1);\n            setInput(e.target.value);\n            setValueFunc(e.target.value);\n            setTextInput(e.target.value);\n            handleTeammatesInputChange(e.target.value);\n          }}\n          onKeyDown={(e) => {\n            if (focused) {\n              if (e.key === \"ArrowUp\") {\n                e.preventDefault();\n                const calcIdx =\n                  activeIdx <= -1 ? suggestions.length - 1 : activeIdx - 1;\n                setActiveIdx(calcIdx);\n                // Set inputs\n                const newIdx =\n                  activeIdx === -1 ? suggestions.length - 1 : activeIdx - 1;\n                setInput(newIdx !== -1 ? suggestions[newIdx] : textInput);\n                setValueFunc(newIdx !== -1 ? suggestions[newIdx] : textInput);\n              } else if (e.key === \"ArrowDown\") {\n                const calcIdx =\n                  activeIdx >= suggestions.length - 1 ? -1 : activeIdx + 1;\n                setActiveIdx(calcIdx);\n                const calcInput =\n                  activeIdx < suggestions.length - 1\n                    ? suggestions[(activeIdx + 1) % suggestions.length]\n                    : textInput;\n                setInput(calcInput);\n                setValueFunc(calcInput);\n              } else if (e.key === \"Enter\") {\n                if (activeIdx !== -1) {\n                  e.preventDefault();\n                  setInput(suggestions[activeIdx]);\n                  handleTeammatesInputChange(suggestions[activeIdx]);\n                  setFocused(false);\n                  setActiveIdx(-1);\n                }\n              }\n            }\n          }}\n        />\n        <AutocompleteList />\n      </div>\n      <div className=\"svg-container\">\n        <svg\n          version=\"1.1\"\n          id=\"Capa_1\"\n          className=\"random-input-icon\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          x=\"0px\"\n          y=\"0px\"\n          viewBox=\"0 0 230.055 230.055\"\n          onClick={() => {\n            const playerName = g.randomName(\"players\");\n            setInput(playerName);\n            setTextInput(playerName);\n            setValueFunc(playerName);\n            handleTeammatesInputChange(playerName);\n          }}\n        >\n          <path\n            d=\"M199.419,124.497c-3.516-3.515-9.213-3.515-12.729,0c-3.515,3.515-3.515,9.213,0,12.728l12.637,12.636h-8.406 c-8.177,0-16.151-2.871-22.453-8.083l-32.346-26.751l32.345-26.751c6.303-5.212,14.277-8.083,22.454-8.083h8.406L186.69,92.83\n\t              c-3.515,3.515-3.515,9.213,0,12.728c1.758,1.757,4.061,2.636,6.364,2.636s4.606-0.879,6.364-2.636l28-28\n\t              c3.515-3.515,3.515-9.213,0-12.728l-28-28c-3.516-3.515-9.213-3.515-12.729,0c-3.515,3.515-3.515,9.213,0,12.728l12.637,12.636\n                h-8.406c-12.354,0-24.403,4.337-33.926,12.211L122,103.348L82.564,70.733c-6.658-5.507-15.084-8.54-23.724-8.54H9\n                c-4.971,0-9,4.029-9,9s4.029,9,9,9h49.841c4.462,0,8.813,1.566,12.252,4.411l36.786,30.423L71.094,145.45\n                c-3.439,2.844-7.791,4.411-12.253,4.411H9c-4.971,0-9,4.029-9,9s4.029,9,9,9h49.841c8.64,0,17.065-3.033,23.725-8.54L122,126.707\n                l34.996,28.943c9.521,7.875,21.57,12.211,33.925,12.211h8.406l-12.637,12.636c-3.515,3.515-3.515,9.213,0,12.728\n                c1.758,1.757,4.061,2.636,6.364,2.636s4.606-0.879,6.364-2.636l28-28c3.515-3.515,3.515-9.213,0-12.728L199.419,124.497z\"\n          />\n        </svg>\n      </div>\n    </div>\n  );\n}\n\nexport default InputField;\n","import InputField from \"./InputField.js\";\nexport default InputField;\n","import React from \"react\";\nimport \"./Button.scss\";\n\nfunction Button(props) {\n  return (\n    <input\n      className=\"jb-button\"\n      type={props.type || \"button\"}\n      value={props.value}\n      disabled={props.disabled || false}\n    />\n  );\n}\n\nexport default Button;\n","import Button from \"./Button\";\nexport default Button;\n","import React from \"react\";\nimport \"./Spinner.scss\";\n\nfunction Spinner(props) {\n  return (\n    <span\n      className={props.type || \"default-spinner\"}\n      style={{ width: props.width || \"32px\", height: props.height || \"32px\" }}\n    />\n  );\n}\n\nexport default Spinner;\n","import Spinner from \"./Spinner\";\nexport default Spinner;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport g from \"../Graph/Graph\";\nimport InputField from \"../InputField\";\nimport Button from \"../Button\";\nimport Spinner from \"../Spinner\";\nimport \"./SixDegreesForm.scss\";\n\nfunction SixDegreesForm() {\n  const [searched, setSearched] = useState(false);\n  const [searching, setSearching] = useState(false);\n  const [numVisited, setNumVisited] = useState(0);\n\n  const [playerOne, setPlayerOne] = useState(\"\");\n  const [playerTwo, setPlayerTwo] = useState(\"\");\n  const [p1Corrected, setP1Corrected] = useState(false);\n  const [p2Corrected, setP2Corrected] = useState(false);\n  const [p1Display, setP1Display] = useState(\"\");\n  const [p2Display, setP2Display] = useState(\"\");\n\n  const [pathIDs, setPathIDs] = useState([]);\n  const mounted = useRef(true);\n\n  // Used to check if unmounted, allows stopping the function midway\n  useEffect(() => {\n    mounted.current = true;\n    return function cleanup() {\n      mounted.current = false;\n    };\n  }, []);\n\n  function graphReturnFunc(path) {\n    if (mounted.current) {\n      setPathIDs(path);\n      setSearched(true);\n      setSearching(false);\n    }\n  }\n\n  function graphCallback(numVisited) {\n    if (!mounted.current) {\n      return false;\n    }\n    setNumVisited(numVisited);\n    return true;\n  }\n\n  const PathResultsDiv = () => {\n    if (searching) {\n      return (\n        <div>\n          <p>\n            Searched {numVisited} out of {g.size} nodes\n          </p>\n        </div>\n      );\n    }\n    if (searched && !pathIDs.length) {\n      return (\n        <div>\n          <p>\n            No path found. Double check that the inputs are spelled correctly.\n            If they are, then there's no way to connect these two players\n            through mutual teammates.\n          </p>\n        </div>\n      );\n    }\n    if (!pathIDs.length) {\n      return null;\n    }\n    const path = [];\n    pathIDs.forEach((node, idx) => {\n      path.push(g.id_to_name[node]);\n      path.push(idx % 2 === 0 ? \"who was on the\" : \"with\");\n    });\n    if (pathIDs.length) {\n      path[1] = \"was on the\";\n    }\n    const connectionNum = (path.length / 2 - 1) / 2;\n    path.pop();\n\n    return (\n      <div>\n        {p1Corrected && (\n          <p>\n            Did you mean <strong>{p1Display}</strong> for player 1?\n          </p>\n        )}\n        {p2Corrected && (\n          <p>\n            Did you mean <strong>{p2Display}</strong> for player 2?\n          </p>\n        )}\n        <p>\n          The <strong>number of connections</strong> separating these two\n          players is <strong>{connectionNum}</strong>.\n        </p>\n        <table>\n          <tbody>\n            {path.map((item, i) => {\n              return (\n                <tr key={i}>\n                  <td\n                    className={`six-degrees-row ${\n                      i % 4 === 0\n                        ? \"content-row player-row\"\n                        : i % 4 === 2\n                        ? \"content-row team-row\"\n                        : \"filler-row\"\n                    }`}\n                  >\n                    <span\n                      className={\n                        i % 4 === 0\n                          ? \"player-content\"\n                          : i % 2 === 0\n                          ? `team-content ${g.name_to_id[item].substring(1, 4)}`\n                          : \"filler-content\"\n                      }\n                    >\n                      {item}\n                    </span>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  function handleSixDegSubmit(e) {\n    e.preventDefault(); // Default behavior is to refresh page, we don't want that\n    if (searching) {\n      return;\n    }\n    setSearched(false);\n    setSearching(true);\n\n    setP1Corrected(false);\n    setP2Corrected(false);\n\n    // Handle P1 correction\n    let id1;\n    if (!g.players.includes(playerOne)) {\n      const res = g.bestNames(playerOne, \"players\", 1);\n      if (!res.length) {\n        setPathIDs([]);\n        setSearched(true);\n        setSearching(false);\n        return;\n      }\n      setP1Corrected(true);\n      id1 = g.name_to_id[res[0]];\n      setP1Display(res[0]);\n    } else {\n      id1 = g.name_to_id[playerOne];\n    }\n\n    // Handle P2 correction\n    let id2;\n    if (!g.players.includes(playerTwo)) {\n      const res = g.bestNames(playerTwo, \"players\", 1);\n      if (!res.length) {\n        setPathIDs([]);\n        setSearched(true);\n        setSearching(false);\n        return;\n      }\n      setP2Corrected(true);\n      id2 = g.name_to_id[res[0]];\n      setP2Display(res[0]);\n    } else {\n      id2 = g.name_to_id[playerTwo];\n    }\n\n    g.pathWebVersion(id1, id2, graphReturnFunc, graphCallback);\n  }\n\n  return (\n    <div>\n      <h1>Six Degrees of Separation</h1>\n      <p>\n        Search any two players and see how they're linked by mutual teammates!\n      </p>\n      <form onSubmit={handleSixDegSubmit}>\n        <InputField\n          {...{\n            inputId: \"player1\",\n            label: \"Player 1\",\n            setValueFunc: setPlayerOne,\n          }}\n        />\n        <InputField\n          {...{\n            inputId: \"player2\",\n            label: \"Player 2\",\n            setValueFunc: setPlayerTwo,\n          }}\n        />\n        <br />\n        <Button type=\"submit\" value=\"Submit\" disabled={searching} />\n      </form>\n      {searching && (\n        <span>\n          Loading... <Spinner width=\"14px\" height=\"14px\" />\n        </span>\n      )}\n      <PathResultsDiv />\n    </div>\n  );\n}\n\nexport default SixDegreesForm;\n","import SixDegreesForm from './SixDegreesForm.js';\nexport default SixDegreesForm;","import React from \"react\";\nconst types = require(\"./types.json\");\n\nfunction Icon(props) {\n  return (\n    <svg\n      x=\"0px\"\n      y=\"0px\"\n      viewBox={props.viewBox || \"0 0 24 24\"}\n      style={props.style || null}\n    >\n      <path d={types[props.type] || null} />\n    </svg>\n  );\n}\n\nexport default Icon;\n","import Icon from \"./Icon.js\";\nexport default Icon;\n","import React from \"react\";\n\nfunction Button(props) {\n  return (\n    <h1 className={`hero-text-${props.size || \"large\"}`}>{props.children}</h1>\n  );\n}\n\nexport default Button;\n","import HeroText from \"./HeroText\";\nexport default HeroText;\n","import React, { useState } from \"react\";\nimport g from \"../Graph/Graph\";\nimport \"./TeammatesForm.scss\";\nimport InputField from \"../InputField\";\nimport Button from \"../Button\";\nimport Icon from \"../Icon\";\nimport HeroText from \"../HeroText\";\n\nfunction TeammatesForm() {\n  const [teammates, setTeammates] = useState([]);\n  const [value, setValue] = useState(\"\");\n  const [dispValue, setDispValue] = useState(\"\");\n  const [corrected, setCorrected] = useState(true);\n  const [invSearch, setInvSearch] = useState(false);\n  const [listToggle, setListToggle] = useState(false);\n\n  function handleTeammatesForm(e) {\n    e.preventDefault(); // Default behavior is to refresh page, we don't want that\n    setCorrected(false);\n    setInvSearch(false);\n    setListToggle(false);\n    let id;\n    if (!g.players.includes(value)) {\n      const res = g.bestNames(value, \"players\", 1);\n      if (!res.length) {\n        setInvSearch(true);\n        return;\n      }\n      setCorrected(true);\n      id = g.name_to_id[res[0]];\n      setDispValue(res[0]);\n    } else {\n      id = g.name_to_id[value];\n      setDispValue(value);\n    }\n\n    const teammateRes = g.getTeammates(id);\n    teammateRes.forEach((id, idx) => {\n      teammateRes[idx] = g.id_to_name[id];\n    });\n    setTeammates(teammateRes);\n  }\n\n  const TeammatesReturnDiv = () => {\n    if (invSearch) {\n      return (\n        <div>\n          <p>\n            Sorry, we weren't able to find anyone with that name, please double\n            check the input.\n          </p>\n        </div>\n      );\n    } else if (!teammates.length) {\n      return null;\n    }\n    return (\n      <div>\n        {corrected && (\n          <p>\n            Did you mean <strong>{dispValue}</strong>?\n          </p>\n        )}\n        <p>\n          <strong>{dispValue}</strong> has been on a roster with{\" \"}\n          <strong>{teammates.length}</strong> unique people.\n        </p>\n        <p\n          id=\"toggle-paragraph\"\n          onClick={() => {\n            setListToggle(!listToggle);\n          }}\n        >\n          Click here to {listToggle ? \"hide\" : \"show\"} all the teammates{\" \"}\n          <Icon\n            type={listToggle ? \"UpArrow\" : \"DownArrow\"}\n            style={{ fill: \"#333333\", height: \"18px\" }}\n          />\n        </p>\n        {listToggle &&\n          teammates.map(function (item, i) {\n            return <li key={i}>{item}</li>;\n          })}\n      </div>\n    );\n  };\n\n  const props = {\n    inputId: \"player\",\n    label: \"Player\",\n    setValueFunc: setValue,\n  };\n\n  return (\n    <div id=\"teammates-form\">\n      <HeroText>Teammates</HeroText>\n      <p>\n        Search up any player and hit submit to see all of the people they've\n        been on a roster with!\n      </p>\n      <form autoComplete=\"off\" onSubmit={handleTeammatesForm}>\n        <div className=\"input-field-group\">\n          <InputField {...props} />\n        </div>\n        <Button type=\"submit\" value=\"Submit\" />\n      </form>\n      <TeammatesReturnDiv />\n    </div>\n  );\n}\n\nexport default TeammatesForm;\n","import TeammatesForm from './TeammatesForm';\nexport default TeammatesForm;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./Body.scss\";\nimport SixDegreesForm from \"../SixDegreesForm\";\nimport TeammatesForm from \"../TeammatesForm\";\n\nfunction Body() {\n  return (\n    <div id=\"body-wrapper\">\n      <div id=\"inner-body\">\n        <Switch>\n          <Route exact path=\"/\">\n            <h1>Home</h1>\n          </Route>\n          <Route path=\"/six-degrees\">\n            <SixDegreesForm />\n          </Route>\n          <Route path=\"/teammates\">\n            <TeammatesForm />\n          </Route>\n          <Route path=\"/height-and-weight\">\n            <h1>Under Construction!</h1>\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Body;\n","import Body from \"./Body\";\nexport default Body;\n","import variables from \"../../_colors.scss\";\n\nimport React from \"react\";\nimport \"./Footer.scss\";\nimport Icon from \"../Icon\";\n\nfunction Footer() {\n  const iconStyle = { height: \"24px\", fill: variables.nflBlue };\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"footer-col\">\n        <Icon type=\"GitHub\" style={iconStyle} />\n        <div>\n          <a className=\"footer-link\" href=\"https://github.com/Justin-Bi\">\n            Github\n          </a>\n        </div>\n      </span>\n      <span className=\"footer-col\">\n        <Icon type=\"LinkedIn\" style={iconStyle} />\n        <div>\n          <a\n            className=\"footer-link\"\n            href=\"https://www.linkedin.com/in/justinbi/\"\n          >\n            LinkedIn\n          </a>\n        </div>\n      </span>\n      <span className=\"footer-col\">\n        <Icon type=\"Email\" style={iconStyle} />\n        <div>\n          <a className=\"footer-link\" href=\"mailto:justinbi@princeton.edu\">\n            Email\n          </a>\n        </div>\n      </span>\n      <span className=\"footer-col\">\n        <Icon type=\"MySite\" style={iconStyle} />\n        <div>\n          <a\n            className=\"footer-link\"\n            href=\"https://justin-bi.github.io/portfolio/\"\n          >\n            My Site\n          </a>\n        </div>\n      </span>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import Footer from \"./Footer\";\nexport default Footer;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./App.scss\";\n\nimport NavBar from \"./components/NavBar\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar />\n        <Body />\n        <Footer />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}