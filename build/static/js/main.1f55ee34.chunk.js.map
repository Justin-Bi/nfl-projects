{"version":3,"sources":["components/NavBar/NavBar.js","components/NavBar/index.js","components/Graph/Graph.js","components/SixDegreesForm/SixDegreesForm.js","components/SixDegreesForm/index.js","components/TeammatesForm/TeammatesForm.js","components/TeammatesForm/index.js","components/Body/Body.js","components/Body/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","Container","Row","Col","sm","md","lg","to","id","activeClassName","vertices","require","i2n","n2i","vert_objs","fuzzysort","g","name","this","id_to_name","name_to_id","names","players","push","isPlayer","searchName","input","coll","collection","amount","teams","inColl","includes","res","go","limit","threshold","Infinity","allowTypo","arr","r","target","sourceId","teammates","visited","queue","length","path","shift","node","neighbors","neighbor","newPath","slice","idx","indexOf","splice","targetId","SixDegreesForm","useState","pathRes","setPathRes","playerOne","setPlayerOne","playerTwo","setPlayerTwo","get_random_player","setFunc","fetch","method","headers","then","json","data","player","onSubmit","e","preventDefault","id1","player1","value","id2","player2","console","time","timeEnd","forEach","map","item","key","htmlFor","type","onChange","onClick","TeammatesForm","setTeammates","suggestions","setSuggestions","focused","setFocused","setInput","textInput","setTextInput","activeIdx","setActiveIdx","AutocompleteList","style","borderBottom","i","onMouseDown","autoComplete","teammateRes","getTeammates","onFocus","onBlur","bestNames","handleTeammatesInputChange","onKeyDown","newIdx","Body","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1f55ee34.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.scss\";\nimport { NavLink } from \"react-router-dom\";\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nfunction NavBar() {\n  return (\n    <div className=\"nav-bar\">\n      <Container>\n        <Row>\n          <Col sm={0} md={3} lg={4} className=\"home-link-group\">\n            <NavLink className=\"nav-link home-link\" to=\"/\">\n              <span className=\"home-link-text\">NFL Projects</span>\n            </NavLink>\n          </Col>\n          <Col sm={12} md={9} lg={8}>\n            <div id=\"nav-link-group\">\n              <NavLink\n                activeClassName=\"active-link\"\n                className=\"nav-link\"\n                to=\"/six-degrees\"\n              >\n                Six Degrees of Separation\n                {/* <span className=\"nav-link-text\">Six Degrees of Separation</span> */}\n              </NavLink>\n              <NavLink\n                activeClassName=\"active-link\"\n                className=\"nav-link\"\n                to=\"/teammates\"\n              >\n                Teammates\n                {/* <span className=\"nav-link-text\">Teammates</span> */}\n              </NavLink>\n              <NavLink\n                activeClassName=\"active-link\"\n                className=\"nav-link\"\n                to=\"/height-and-weight\"\n              >\n                Height and Weight\n                {/* <span className=\"nav-link-text\">Height and Weight</span> */}\n              </NavLink>\n            </div>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import NavBar from \"./NavBar\";\nexport default NavBar;\n","const vertices = require(\"./graph.json\");\nconst i2n = require(\"./id_to_name.json\");\nconst n2i = require(\"./name_to_id.json\");\nconst vert_objs = require(\"./vert_objs.json\");\nconst fuzzysort = require(\"fuzzysort\");\n\nclass Graph {\n  constructor(vertices, i2n, n2i, vert_objs) {\n    this.vertices = vertices;\n    this.id_to_name = i2n;\n    this.name_to_id = n2i;\n    this.vert_objs = vert_objs;\n    this.names = [];\n    this.players = [];\n\n    for (const name in n2i) {\n      this.names.push(name);\n    }\n\n    for (const id in vert_objs) {\n      if (vert_objs[id].isPlayer) {\n        this.players.push(vert_objs[id].searchName);\n      }\n    }\n  }\n\n  // Returns the closest matching names of all\n  bestNames(input, coll, amount = 20) {\n    let collection;\n    switch (coll) {\n      case \"all\":\n        collection = this.names;\n        break;\n      case \"players\":\n        collection = this.players;\n        break;\n      case \"teams\":\n        collection = this.teams;\n        break;\n      default:\n        collection = [];\n    }\n\n    const inColl = collection.includes(input);\n\n    const res = fuzzysort.go(input, collection, {\n      limit: amount,\n      threshold: inColl ? -100 : -Infinity,\n      allowTypo: true,\n    });\n    const arr = [];\n    for (const r of res) {\n      arr.push(r.target);\n    }\n    return arr;\n  }\n\n  getTeammates(sourceId) {\n    // Handle case where either of them doesn't exist in the graph\n    if (!sourceId) {\n      return [];\n    }\n\n    const teammates = [];\n    const visited = []; // Tracks visited vertices\n    const queue = [[sourceId]]; // Vertices to visit\n\n    while (queue.length > 0) {\n      let path = queue.shift();\n      let node = path[path.length - 1];\n\n      // If the node was visited already, can skip\n      // Might not need this for the teammate one\n      if (!visited.includes(node)) {\n        let neighbors = this.vertices[node];\n\n        // Case where two nodes are already in the path, the original player and the team. Means the third node\n        // about to be added must be a teammate\n        if (path.length === 2) {\n          for (const neighbor of neighbors) {\n            if (!teammates.includes(neighbor)) {\n              teammates.push(neighbor);\n            }\n          }\n        } else {\n          // Loop to iterate over the neighbors of the node\n          for (const neighbor of neighbors) {\n            let newPath = path.slice();\n            newPath.push(neighbor);\n            queue.push(newPath);\n          }\n          visited.push(node);\n        }\n      }\n    }\n\n    // Remove the sourceId from the teammates\n    const idx = teammates.indexOf(sourceId);\n    if (idx > -1) {\n      teammates.splice(idx, 1);\n    }\n    return teammates;\n  }\n\n  path(sourceId, targetId) {\n    // Handle case where either of them doesn't exist in the graph\n    if (!sourceId || !targetId) {\n      return [];\n    }\n\n    // Edge case where they're the same\n    if (sourceId === targetId) {\n      return [sourceId];\n    }\n\n    const visited = []; // Tracks visited vertices\n    const queue = [[sourceId]]; // Vertices to visit\n\n    while (queue.length > 0) {\n      let path = queue.shift();\n      let node = path[path.length - 1];\n\n      // If the node was visited already, can skip\n      if (!visited.includes(node)) {\n        let neighbors = this.vertices[node];\n\n        // Loop to iterate over the neighbors of the node\n        for (const neighbor of neighbors) {\n          let newPath = path.slice();\n          newPath.push(neighbor);\n          queue.push(newPath);\n\n          // Check if the neighbor node is the goal\n          if (neighbor === targetId) {\n            return newPath;\n          }\n        }\n        visited.push(node);\n      }\n    }\n    // Condition when the nodes are not connected\n    return [];\n  }\n}\n\nconst g = new Graph(vertices, i2n, n2i, vert_objs);\n\nexport default g;\n","import React, { useState } from \"react\";\nimport g from \"../Graph/Graph\";\n\nfunction SixDegreesForm() {\n  const [pathRes, setPathRes] = useState(null);\n\n  const [playerOne, setPlayerOne] = useState(\"\");\n  const [playerTwo, setPlayerTwo] = useState(\"\");\n\n  function handleSubmit2(e) {\n    e.preventDefault(); // Default behavior is to refresh page, we don't want that\n    const id1 = g.name_to_id[e.target.player1.value];\n    const id2 = g.name_to_id[e.target.player2.value];\n\n    // If either is undefined, this won't happen\n    console.time(\"path\");\n    let path = g.path(id1, id2);\n    console.timeEnd(\"path\");\n\n    path.forEach((node, idx) => {\n      path[idx] = g.id_to_name[node];\n    });\n\n    // Covers potential cases if no path has been found\n    if (path.length === 0) {\n      setPathRes(\n        <p>\n          No path found. Double check that the inputs are exactly as they are on\n          PFR's website. If so, then it's possible there simply is no path\n          between the players.\n        </p>\n      );\n      // Otherwise returns the paths in a list format (could update later to make it look better)\n    } else {\n      setPathRes(path.map((item) => <li key={`path-item-${item}`}>{item}</li>));\n    }\n  }\n\n  function get_random_player(setFunc) {\n    fetch(\"/api/get_random_player\", {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setFunc(data.player);\n      });\n  }\n\n  return (\n    <div>\n      <h1>Six Degrees of Separation</h1>\n      <p>\n        Look up two players on Pro Football Reference. Paste in their URL IDs\n        and hit submit. As an example, Aaron Rodgers's PFR URL is\n        https://www.pro-football-reference.com/players/R/RodgAa00.htm, so his ID\n        would be RodgAa00.\n      </p>\n      <form onSubmit={handleSubmit2}>\n        <label htmlFor=\"player1\">Player 1:</label>\n        <input\n          type=\"text\"\n          id=\"player1\"\n          name=\"player1\"\n          value={playerOne}\n          onChange={(e) => setPlayerOne(e.target.value)}\n        />\n        <button type=\"button\" onClick={() => get_random_player(setPlayerOne)}>\n          Random\n        </button>\n        <br /> {/* Rename these ids later */}\n        <label htmlFor=\"player2\">Player 2:</label>\n        <input\n          type=\"text\"\n          id=\"player2\"\n          name=\"player2\"\n          value={playerTwo}\n          onChange={(e) => setPlayerTwo(e.target.value)}\n        />\n        <button type=\"button\" onClick={() => get_random_player(setPlayerTwo)}>\n          Random\n        </button>\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n        <br />\n      </form>\n      <ul>{pathRes}</ul>\n    </div>\n  );\n}\n\nexport default SixDegreesForm;\n","import SixDegreesForm from './SixDegreesForm.js';\nexport default SixDegreesForm;","import React, { useState } from \"react\";\nimport g from \"../Graph/Graph\";\nimport \"./TeammatesForm.scss\";\n\nfunction TeammatesForm() {\n  const [teammates, setTeammates] = useState([]);\n  const [suggestions, setSuggestions] = useState([]);\n  const [focused, setFocused] = useState(false);\n  const [input, setInput] = useState(\"\"); // Will want to rename this to value\n  const [textInput, setTextInput] = useState(\"\");\n  const [activeIdx, setActiveIdx] = useState(0);\n\n  const AutocompleteList = () => {\n    if (!focused) {\n      return null;\n    }\n\n    return (\n      <div\n        className=\"autocomplete-items\"\n        id=\"autocomplete-list\"\n        style={{ borderBottom: suggestions.length ? null : \"none\" }}\n      >\n        {suggestions.map(function (item, i) {\n          return (\n            <div\n              key={i}\n              // onMouseDown prevents default to stop the form from blurring before onClick can activate\n              onMouseDown={(e) => {\n                e.preventDefault();\n              }}\n              onClick={() => {\n                setInput(item);\n                setFocused(false);\n              }}\n              className={activeIdx === i ? \"autocomplete-active\" : null}\n            >\n              {item}\n              <input type=\"hidden\" value={item} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  function handleTeammatesInputChange(e) {\n    setSuggestions(g.bestNames(e.target.value, \"players\"));\n  }\n\n  function handleTeammatesForm(e) {\n    e.preventDefault(); // Default behavior is to refresh page, we don't want that\n    const id = g.name_to_id[e.target.player.value];\n\n    const teammateRes = g.getTeammates(id);\n    teammateRes.forEach((id, idx) => {\n      teammateRes[idx] = g.id_to_name[id];\n    });\n    setTeammates(teammateRes);\n  }\n\n  return (\n    <div className=\"body\">\n      <h1>Teammates</h1>\n      <p>\n        Search up any player and hit submit to see all of the people they've\n        been on a roster with!\n      </p>\n      <form autoComplete=\"off\" onSubmit={handleTeammatesForm}>\n        <div className=\"autoComplete\">\n          <label htmlFor=\"player\">Player: </label>\n          <input\n            type=\"text\"\n            id=\"player\"\n            name=\"player\"\n            value={input}\n            onFocus={() => {\n              setFocused(true);\n            }}\n            onBlur={() => {\n              setFocused(false);\n            }}\n            onChange={(e) => {\n              setFocused(true);\n              setInput(e.target.value);\n              setTextInput(e.target.value);\n              handleTeammatesInputChange(e);\n            }}\n            onKeyDown={(e) => {\n              if (focused) {\n                if (e.key === \"ArrowUp\") {\n                  e.preventDefault();\n                  if (activeIdx <= -1) {\n                    setActiveIdx(suggestions.length - 1);\n                  } else {\n                    setActiveIdx(activeIdx - 1);\n                  }\n\n                  // Set inputs\n                  const newIdx =\n                    activeIdx === -1 ? suggestions.length - 1 : activeIdx - 1;\n                  setInput(newIdx !== -1 ? suggestions[newIdx] : textInput);\n                } else if (e.key === \"ArrowDown\") {\n                  if (activeIdx >= suggestions.length - 1) {\n                    setActiveIdx(-1);\n                  } else {\n                    setActiveIdx(activeIdx + 1);\n                  }\n                  setInput(\n                    activeIdx < suggestions.length - 1\n                      ? suggestions[(activeIdx + 1) % suggestions.length]\n                      : textInput\n                  );\n                } else if (e.key === \"Enter\") {\n                  if (activeIdx !== -1) {\n                    e.preventDefault();\n                    setInput(suggestions[activeIdx]);\n                    setFocused(false);\n                    setActiveIdx(-1);\n                  }\n                }\n              }\n            }}\n          />\n          <AutocompleteList />\n        </div>\n        <button type=\"button\" onClick={() => {}}>\n          Random\n        </button>\n        <br />\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n      <div>\n        {teammates.map(function (item, i) {\n          return <li key={i}>{item}</li>;\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default TeammatesForm;\n","import TeammatesForm from './TeammatesForm';\nexport default TeammatesForm;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./Body.scss\";\nimport SixDegreesForm from \"../SixDegreesForm\";\nimport TeammatesForm from \"../TeammatesForm\";\n\nfunction Body() {\n  return (\n    <div id=\"body-wrapper\">\n      <Switch>\n        <Route exact path=\"/\">\n          <h1>Home</h1>\n        </Route>\n        <Route path=\"/six-degrees\">\n          <SixDegreesForm />\n        </Route>\n        <Route path=\"/teammates\">\n          <TeammatesForm />\n        </Route>\n        <Route path=\"/height-and-weight\">\n          <h1>Under Construction!</h1>\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default Body;\n","import Body from \"./Body\";\nexport default Body;\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nimport \"./App.scss\";\n\nimport NavBar from \"./components/NavBar\";\nimport Body from \"./components/Body\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar />\n        <Body />\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}